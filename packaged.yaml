AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates a VPC, Elasticache and a lambda function.
Mappings:
  AmiMap:
    ca-central-1:
      '64': ami-5b55d23f
    eu-west-1:
      '64': ami-3bfab942
    eu-west-2:
      '64': ami-dff017b8
    us-east-1:
      '64': ami-1853ac65
    us-east-2:
      '64': ami-25615740
    us-west-1:
      '64': ami-bf5540df
    us-west-2:
      '64': ami-d874e0a0
Outputs:
  ALBSecurityGroup:
    Description: ALBSecurityGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ALBSecurityGroup
    Value:
      Ref: ALBSecurityGroup
  AWSRegion:
    Description: AWS Region Stack is Running
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AWSRegion
    Value:
      Fn::Sub: ${AWS::Region}
  EcrBackendRepository:
    Description: The ECR Repository Uri
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-EcrBackendRepositoryUri
    Value:
      Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrBackendRepository}
  EcrDashboardRepository:
    Description: The ECR Repository Uri
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-EcrDashboardRepositoryUri
    Value:
      Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDashboardRepository}
  EcsSecurityGroup:
    Description: EcsSecurityGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-EcsSecurityGroup
    Value:
      Ref: EcsSecurityGroup
  HostIP:
    Description: The IP address of the instance
    Value:
      Fn::GetAtt:
      - WebServerInstance
      - PublicIp
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-KeyName
    Value:
      Ref: KeyName
  LambdaSecurityGroup:
    Description: LambdaSecurityGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-LambdaSecurityGroup
    Value:
      Ref: LambdaSecurityGroup
  PrivateSubnet1:
    Description: PrivateSubnet1
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet1
    Value:
      Ref: PrivateSubnet1
  PrivateSubnet2:
    Description: PrivateSubnet2
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet2
    Value:
      Ref: PrivateSubnet2
  PublicSubnet1:
    Description: PublicSubnet for ECS
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet1
    Value:
      Ref: PublicSubnet1
  PublicSubnet2:
    Description: PublicSubnet2
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet2
    Value:
      Ref: PublicSubnet2
  RedisEndpoint:
    Description: RedisEndpoint
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RedisEndpoint
    Value:
      Fn::GetAtt:
      - RedisCluster
      - RedisEndpoint.Address
  RedisPort:
    Description: RedisPort
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-RedisPort
    Value:
      Fn::GetAtt:
      - RedisCluster
      - RedisEndpoint.Port
  VPCId:
    Description: VPC
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-VPCId
    Value:
      Ref: VPC
Parameters:
  ElastiCachePort:
    Default: '6379'
    Description: Post for your Amazon ElastiCache instance
    Type: String
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
Resources:
  ALBSecurityGroup:
    Properties:
      GroupDescription: Enable HTTP access to ALB
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  AttachGateway:
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
    Type: AWS::EC2::VPCGatewayAttachment
  BastionProfile:
    Properties:
      Roles:
      - Ref: BastionRole
    Type: AWS::IAM::InstanceProfile
  BastionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
    Type: AWS::IAM::Role
  DefaultPrivateRoute1:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway1
      RouteTableId:
        Ref: PrivateRouteTable1
    Type: AWS::EC2::Route
  DefaultPrivateRoute2:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway2
      RouteTableId:
        Ref: PrivateRouteTable2
    Type: AWS::EC2::Route
  EcrBackendRepository:
    Properties:
      RepositoryName:
        Fn::Sub: ${AWS::StackName}-backend
    Type: AWS::ECR::Repository
  EcrDashboardRepository:
    Properties:
      RepositoryName:
        Fn::Sub: ${AWS::StackName}-dashboard
    Type: AWS::ECR::Repository
  EcsSecurityGroup:
    Properties:
      GroupDescription: Enable HTTP access to service
      SecurityGroupIngress:
      - FromPort: 8080
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: ALBSecurityGroup
        ToPort: 8080
      - FromPort: 80
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: ALBSecurityGroup
        ToPort: 80
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  InboundHTTPNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId:
        Ref: NetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  InboundResponsePortsNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId:
        Ref: NetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '102'
    Type: AWS::EC2::NetworkAclEntry
  InboundSSHNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'false'
      NetworkAclId:
        Ref: NetworkAcl
      PortRange:
        From: '22'
        To: '22'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '101'
    Type: AWS::EC2::NetworkAclEntry
  InstanceSecurityGroup:
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  InternalAllNetworkAclEntry:
    Properties:
      CidrBlock: 10.0.0.0/16
      Egress: 'false'
      NetworkAclId:
        Ref: NetworkAcl
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '200'
    Type: AWS::EC2::NetworkAclEntry
  InternetGateway:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
    Type: AWS::EC2::InternetGateway
  LambdaSecurityGroup:
    Properties:
      GroupDescription: Enable Redis access
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  NatGateway1:
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NatGateway1EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
    Type: AWS::EC2::NatGateway
  NatGateway1EIP:
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  NatGateway2:
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NatGateway2EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet2
    Type: AWS::EC2::NatGateway
  NatGateway2EIP:
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  NetworkAcl:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      VpcId:
        Ref: VPC
    Type: AWS::EC2::NetworkAcl
  OutBoundHTTPNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId:
        Ref: NetworkAcl
      PortRange:
        From: '80'
        To: '80'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
    Type: AWS::EC2::NetworkAclEntry
  OutBoundHTTPSNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId:
        Ref: NetworkAcl
      PortRange:
        From: '443'
        To: '443'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '101'
    Type: AWS::EC2::NetworkAclEntry
  OutBoundResponsePortsNetworkAclEntry:
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId:
        Ref: NetworkAcl
      PortRange:
        From: '1024'
        To: '65535'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '102'
    Type: AWS::EC2::NetworkAclEntry
  OutInternalAllNetworkAclEntry:
    Properties:
      CidrBlock: 10.0.0.0/16
      Egress: 'true'
      NetworkAclId:
        Ref: NetworkAcl
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '200'
    Type: AWS::EC2::NetworkAclEntry
  PrivateRouteTable1:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  PrivateRouteTable2:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  PrivateSubnet1:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: 10.0.2.0/24
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value: PrivateSubnet1
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  PrivateSubnet2:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: 10.0.3.0/24
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value: PrivateSubnet2
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  PrivateSubnetRouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      SubnetId:
        Ref: PrivateSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnetRouteTableAssociation2:
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      SubnetId:
        Ref: PrivateSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet1:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: 10.0.0.0/24
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value: PublicSubnet1
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  PublicSubnet2:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock: 10.0.1.0/24
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value: PublicSubnet2
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  RedisCluster:
    Properties:
      AutoMinorVersionUpgrade: true
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName:
        Ref: RedisSubnetGroup
      Engine: redis
      EngineVersion: 3.2.6
      NumCacheNodes: 1
      Port:
        Ref: ElastiCachePort
      VpcSecurityGroupIds:
      - Ref: RedisSecurityGroup
    Type: AWS::ElastiCache::CacheCluster
  RedisSecurityGroup:
    Properties:
      GroupDescription: Enable Redis access
      SecurityGroupIngress:
      - FromPort: 6379
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: EcsSecurityGroup
        ToPort: 6379
      - FromPort: 6379
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: LambdaSecurityGroup
        ToPort: 6379
      VpcId:
        Ref: VPC
    Type: AWS::EC2::SecurityGroup
  RedisSubnetGroup:
    Properties:
      Description: The Subnet Group for the redis cluster
      SubnetIds:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
    Type: AWS::ElastiCache::SubnetGroup
  Route:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTable
    Type: AWS::EC2::Route
  RouteTable:
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  SubnetNetworkAclAssociation1:
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      SubnetId:
        Ref: PublicSubnet1
    Type: AWS::EC2::SubnetNetworkAclAssociation
  SubnetNetworkAclAssociation2:
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      SubnetId:
        Ref: PublicSubnet2
    Type: AWS::EC2::SubnetNetworkAclAssociation
  SubnetNetworkAclAssociation3:
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      SubnetId:
        Ref: PrivateSubnet1
    Type: AWS::EC2::SubnetNetworkAclAssociation
  SubnetNetworkAclAssociation4:
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      SubnetId:
        Ref: PrivateSubnet2
    Type: AWS::EC2::SubnetNetworkAclAssociation
  SubnetRouteTableAssociation:
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PublicSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociation2:
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PublicSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  VPC:
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Name
        Value:
          Ref: AWS::StackId
    Type: AWS::EC2::VPC
  WebServerInstance:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DependsOn:
    - AttachGateway
    - EcrBackendRepository
    - EcrDashboardRepository
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - '[main]

                    '
                  - stack=
                  - Ref: AWS::StackId
                  - '

                    '
                  - region=
                  - Ref: AWS::Region
                  - '

                    '
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - ''
                - - '[cfn-auto-reloader-hook]

                    '
                  - 'triggers=post.update

                    '
                  - 'path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init

                    '
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - Ref: AWS::StackName
                  - '         --resource WebServerInstance '
                  - '         --region '
                  - Ref: AWS::Region
                  - '

                    '
                  - 'runas=root

                    '
              group: root
              mode: '000400'
              owner: root
          packages:
            yum:
              git: []
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
      Comment: Install a simple application
    Properties:
      IamInstanceProfile:
        Ref: BastionProfile
      ImageId:
        Fn::FindInMap:
        - AmiMap
        - Ref: AWS::Region
        - '64'
      InstanceType: t2.medium
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        DeviceIndex: '0'
        GroupSet:
        - Ref: InstanceSecurityGroup
        SubnetId:
          Ref: PublicSubnet1
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      UserData:
        Fn::Base64:
          Fn::Sub: '#!/bin/bash -xe

            yum update -y

            yum install -y git docker

            usermod -a -G docker ec2-user

            service docker start

            echo export DASHBOARD_ECR_URI=$(aws cloudformation describe-stacks --stack-name
            ${AWS::StackName} --query ''Stacks[*].Outputs[?OutputKey==`EcrDashboardRepository`].OutputValue''
            --output text --region ${AWS::Region}) >> /etc/profile

            echo export BACKEND_ECR_URI=$(aws cloudformation describe-stacks --stack-name
            ${AWS::StackName} --query ''Stacks[*].Outputs[?OutputKey==`EcrBackendRepository`].OutputValue''
            --output text --region ${AWS::Region}) >> /etc/profile

            su - ec2-user <<EOF

            cd /home/ec2-user

            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh
            | bash

            . ~/.nvm/nvm.sh

            nvm install 8.6.0

            aws configure set default.region ${AWS::Region}

            mkdir lab

            aws s3 sync s3://elasticache-retail-dashboard/code /home/ec2-user/lab


            EOF

            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance
            --region ${AWS::Region}

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance
            --region ${AWS::Region}

            '
    Type: AWS::EC2::Instance
Transform: AWS::Serverless-2016-10-31
