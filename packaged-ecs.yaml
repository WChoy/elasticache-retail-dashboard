AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  IsEC2:
    Fn::Not:
    - Fn::Equals:
      - Fn::FindInMap:
        - EcsMap
        - Ref: AWS::Region
        - Ref: LaunchType
      - FARGATE
Description: This template creates an ECS cluster and 2 services
Mappings:
  AWSRegionToAMI:
    ap-northeast-1:
      AMIID: ami-9cd57ffd
    ap-southeast-1:
      AMIID: ami-a900a3ca
    ap-southeast-2:
      AMIID: ami-5781be34
    eu-central-1:
      AMIID: ami-54f5303b
    eu-west-1:
      AMIID: ami-a1491ad2
    us-east-1:
      AMIID: ami-eca289fb
    us-east-2:
      AMIID: ami-446f3521
    us-west-1:
      AMIID: ami-9fadf8ff
    us-west-2:
      AMIID: ami-7abc111a
  EcsMap:
    ca-central-1:
      EC2: EC2
      FARGATE: EC2
    eu-west-1:
      EC2: EC2
      FARGATE: EC2
    eu-west-2:
      EC2: EC2
      FARGATE: EC2
    us-east-1:
      EC2: EC2
      FARGATE: FARGATE
    us-east-2:
      EC2: EC2
      FARGATE: EC2
    us-west-1:
      EC2: EC2
      FARGATE: EC2
    us-west-2:
      EC2: EC2
      FARGATE: EC2
Outputs:
  AppUrl:
    Description: Application Endpoint
    Value:
      Fn::GetAtt:
      - ECSALB
      - DNSName
  KinesisStream:
    Description: The arn of the kinesis data stream
    Value:
      Ref: KinesisStream
Parameters:
  LaunchType:
    AllowedValues:
    - EC2
    - FARGATE
    Default: FARGATE
    Description: Deploy to EC2 or FARGATE
    Type: String
  StackName:
    Description: The name of the cloudformation stack that created the network and
      elasticache
    MinLength: 1
    Type: String
Resources:
  ALBListener:
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: ECSTG
        Type: forward
      LoadBalancerArn:
        Ref: ECSALB
      Port: '80'
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  BackendECSTG:
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true'
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${StackName}-VPCId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  CloudwatchLogsGroup:
    Properties:
      LogGroupName:
        Fn::Sub: ECSLogGroup-${AWS::StackName}
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  EC2InstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: EC2Role
    Type: AWS::IAM::InstanceProfile
  EC2Role:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ecs:CreateCluster
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
        PolicyName: ecs-service
    Type: AWS::IAM::Role
  ECSALB:
    Properties:
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Scheme: internet-facing
      SecurityGroups:
      - Fn::ImportValue:
          Fn::Sub: ${StackName}-ALBSecurityGroup
      Subnets:
      - Fn::ImportValue:
          Fn::Sub: ${StackName}-PublicSubnet1
      - Fn::ImportValue:
          Fn::Sub: ${StackName}-PublicSubnet2
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  ECSALBBackendListenerRule:
    DependsOn: ALBListener
    Properties:
      Actions:
      - TargetGroupArn:
          Ref: BackendECSTG
        Type: forward
      Conditions:
      - Field: path-pattern
        Values:
        - /socket*
      ListenerArn:
        Ref: ALBListener
      Priority: 1
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  ECSALBListenerRule:
    DependsOn: ALBListener
    Properties:
      Actions:
      - TargetGroupArn:
          Ref: ECSTG
        Type: forward
      Conditions:
      - Field: path-pattern
        Values:
        - /
      ListenerArn:
        Ref: ALBListener
      Priority: 2
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  ECSCluster:
    Type: AWS::ECS::Cluster
  ECSServiceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - elasticloadbalancing:RegisterTargets
            - ec2:Describe*
            - ec2:AuthorizeSecurityGroupIngress
            Effect: Allow
            Resource: '*'
        PolicyName: ecs-service
    Type: AWS::IAM::Role
  ECSTG:
    DependsOn: ECSALB
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true'
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${StackName}-VPCId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  ECSTaskRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
        PolicyName: ecs-service
    Type: AWS::IAM::Role
  Ec2WaitHandle:
    Condition: IsEC2
    DependsOn: EcsInstance
    Type: AWS::CloudFormation::WaitConditionHandle
  EcsInstance:
    Condition: IsEC2
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Sub: "[main] \nstack=${AWS::StackId}\nregion=${AWS::Region}\n"
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: Sub ! [cfn-auto-reloader-hook] triggers=post.update path=Resources.EcsInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource
                EcsInstance --region ${AWS::Region} runas=root
              group: root
              mode: '000400'
              owner: root
          packages:
            yum:
              git: []
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
      Comment: ECS Cluster
    Properties:
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      ImageId:
        Fn::FindInMap:
        - AWSRegionToAMI
        - Ref: AWS::Region
        - AMIID
      InstanceType: t2.medium
      KeyName:
        Fn::ImportValue:
          Fn::Sub: ${StackName}-KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeleteOnTermination: 'true'
        DeviceIndex: '0'
        GroupSet:
        - Ref: EcsSecurityGroup
        SubnetId:
          Fn::ImportValue:
            Fn::Sub: ${StackName}-PublicSubnet1
      UserData:
        Fn::Base64:
          Fn::Sub: '#!/bin/bash -xe

            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

            yum install -y aws-cfn-bootstrap

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EcsInstance
            --region ${AWS::Region}

            '
    Type: AWS::EC2::Instance
  EcsSecurityGroup:
    Properties:
      GroupDescription: ECS Security Group
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${StackName}-VPCId
    Type: AWS::EC2::SecurityGroup
  EcsSecurityGroupSSHinbound:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: '22'
      GroupId:
        Ref: EcsSecurityGroup
      IpProtocol: tcp
      ToPort: '22'
    Type: AWS::EC2::SecurityGroupIngress
  EcsWaitCondition:
    Properties:
      Count: 0
      Handle:
        Fn::If:
        - IsEC2
        - Ref: Ec2WaitHandle
        - Ref: FargateWaitHandle
      Timeout: '1'
    Type: AWS::CloudFormation::WaitCondition
  FargateWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  KinesisStream:
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-stream
      ShardCount: 1
      Tags:
      - Key: Group
        Value: elasticache-retail-dashboard
    Type: AWS::Kinesis::Stream
  ProcessorFunction:
    DependsOn: ProcessorRolePolicy
    Properties:
      CodeUri: s3://elasticache-retail-dashboard-us-east-1/deploy-lambda//51a431c1403b9a068eafe0c4744918e4
      Description: Processes incoming orders, pushes metrics to ElastiCache
      Environment:
        Variables:
          ELASTICACHE_HOST:
            Fn::ImportValue:
              Fn::Sub: ${StackName}-RedisEndpoint
          ELASTICACHE_PORT:
            Fn::ImportValue:
              Fn::Sub: ${StackName}-RedisPort
      Events:
        KinesisStream:
          Properties:
            StartingPosition: LATEST
            Stream:
              Fn::GetAtt:
              - KinesisStream
              - Arn
          Type: Kinesis
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - ProcessorFunctionRole
        - Arn
      Runtime: nodejs6.10
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
        - Fn::ImportValue:
            Fn::Sub: ${StackName}-LambdaSecurityGroup
        SubnetIds:
        - Fn::ImportValue:
            Fn::Sub: ${StackName}-PrivateSubnet1
        - Fn::ImportValue:
            Fn::Sub: ${StackName}-PrivateSubnet2
    Type: AWS::Serverless::Function
  ProcessorFunctionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  ProcessorRolePolicy:
    Properties:
      Description: ProcessorFunction lambda role
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
        - Action:
          - ec2:DescribeNetworkInterfaces
          - ec2:CreateNetworkInterface
          - ec2:DeleteNetworkInterface
          Effect: Allow
          Resource: '*'
        - Action:
          - kinesis:GetRecords
          - kinesis:GetShardIterator
          - kinesis:DescribeStream
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - KinesisStream
            - Arn
        - Action:
          - kinesis:ListStreams
          Effect: Allow
          Resource: '*'
        Version: '2012-10-17'
      Roles:
      - Ref: ProcessorFunctionRole
    Type: AWS::IAM::ManagedPolicy
  backendservice:
    DependsOn:
    - ALBListener
    - ECSALBBackendListenerRule
    - EcsWaitCondition
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: '1'
      LaunchType:
        Fn::FindInMap:
        - EcsMap
        - Ref: AWS::Region
        - Ref: LaunchType
      LoadBalancers:
      - ContainerName: backend
        ContainerPort: '8080'
        TargetGroupArn:
          Ref: BackendECSTG
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Fn::ImportValue:
              Fn::Sub: ${StackName}-EcsSecurityGroup
          Subnets:
          - Fn::ImportValue:
              Fn::Sub: ${StackName}-PrivateSubnet1
          - Fn::ImportValue:
              Fn::Sub: ${StackName}-PrivateSubnet2
      TaskDefinition:
        Ref: taskdefinition
    Type: AWS::ECS::Service
  dashboardTaskDefinition:
    DependsOn:
    - EcsWaitCondition
    Properties:
      ContainerDefinitions:
      - Cpu: '10'
        Environment:
        - Name: ELASTICACHE_HOST
          Value:
            Fn::ImportValue:
              Fn::Sub: ${StackName}-RedisEndpoint
        - Name: ELASTICACHE_PORT
          Value:
            Fn::ImportValue:
              Fn::Sub: ${StackName}-RedisPort
        Essential: 'true'
        Image:
          Fn::ImportValue:
            Fn::Sub: ${StackName}-EcrDashboardRepositoryUri
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: CloudwatchLogsGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: ecs-demo-app
        Memory: '1024'
        Name: dashboard
        PortMappings:
        - ContainerPort: 80
      Cpu: 256
      ExecutionRoleArn:
        Fn::GetAtt:
        - ECSTaskRole
        - Arn
      Family:
        Fn::Sub: ${AWS::StackName}-ecs-dashboard
      Memory: 1GB
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      - EC2
    Type: AWS::ECS::TaskDefinition
  service:
    DependsOn:
    - ALBListener
    - ECSALBListenerRule
    - EcsWaitCondition
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: '1'
      LaunchType:
        Fn::FindInMap:
        - EcsMap
        - Ref: AWS::Region
        - Ref: LaunchType
      LoadBalancers:
      - ContainerName: dashboard
        ContainerPort: '80'
        TargetGroupArn:
          Ref: ECSTG
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Fn::ImportValue:
              Fn::Sub: ${StackName}-EcsSecurityGroup
          Subnets:
          - Fn::ImportValue:
              Fn::Sub: ${StackName}-PrivateSubnet1
          - Fn::ImportValue:
              Fn::Sub: ${StackName}-PrivateSubnet2
      TaskDefinition:
        Ref: dashboardTaskDefinition
    Type: AWS::ECS::Service
  taskdefinition:
    DependsOn:
    - EcsWaitCondition
    Properties:
      ContainerDefinitions:
      - Cpu: '10'
        Environment:
        - Name: ELASTICACHE_HOST
          Value:
            Fn::ImportValue:
              Fn::Sub: ${StackName}-RedisEndpoint
        - Name: ELASTICACHE_PORT
          Value:
            Fn::ImportValue:
              Fn::Sub: ${StackName}-RedisPort
        Essential: 'true'
        Image:
          Fn::ImportValue:
            Fn::Sub: ${StackName}-EcrBackendRepositoryUri
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: CloudwatchLogsGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: ecs-demo-app
        Memory: '1024'
        Name: backend
        PortMappings:
        - ContainerPort: 8080
      Cpu: 256
      ExecutionRoleArn:
        Fn::GetAtt:
        - ECSTaskRole
        - Arn
      Family:
        Fn::Sub: ${AWS::StackName}-ecs-backend
      Memory: 1GB
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      - EC2
    Type: AWS::ECS::TaskDefinition
Transform: AWS::Serverless-2016-10-31
